import { MinusIcon } from '@heroicons/react/solid';
import { useEffect, useState } from 'react';
import { useAuthState } from 'react-firebase-hooks/auth';
import { useParams } from 'react-router-dom';
import { toast } from 'react-toastify';
import auth from '../../../firebase.init';
import Loading from '../../Shared/Loading';
import PurchaseModal from './PurchaseMoral';

const Purchase = () => {
    const { _id } = useParams();
    const [product, setProduct] = useState([]);
    const [orderQuantity, setOrderQuantity] = useState(2);
    const [user] = useAuthState(auth);
    const [bookingInfo, setBookingInfo] = useState({});

    useEffect(() => {
        const url = `http://localhost:5000/product?id=${_id}`;
     
        fetch(url)
            .then(res => res.json())
            .then(data => {
                setProduct(data)
            });
    }, [_id]);

    if (!product) {
        return <Loading></Loading>
    }
console.log(product);
    const handleIncreaseQuantity = (event) => {
        const newQuantity = orderQuantity + 1;
        product.quantity = product.quantity - 1;
        product.price = product.price * parseInt(newQuantity);
        setOrderQuantity(newQuantity);
        const bookedProduct = {
            name: product.name,
            price: product.price,
            image: product.img,
            quantity: newQuantity,
            email: user.email,
            description: product.description,
            displayName: user.displayName,
            paid: false,
            pending: true
        }
        setBookingInfo(bookedProduct)
    }

    const handleDecreaseQuantity = (event) => {
        if (orderQuantity <= 2) {
            return toast.error('Products must be 2 or more', { id: '2' });
        }
        const newQuantity = orderQuantity - 1;
        product.quantity = parseInt(product.quantity) - 1;
        product.price = product.price * parseInt(newQuantity);
        setOrderQuantity(newQuantity);

        const bookedProduct = {
            name: product.name,
            price: product.price,
            quantity: newQuantity,
            image: product.img,
            email: user.email,
            description: product.description,
            displayName: user.displayName,
            paid: false,
            pending: true
        }
        setBookingInfo(bookedProduct)
    }

    const handleBookingInfo = (event) => {

        if (!bookingInfo?.email) {
            const bookedProduct = {
                name: product.name,
                price: parseInt(product.price) * 2,
                quantity: product.quantity,
                image: product.img,
                email: user.email,
                description: product.description,              
                displayName: user.displayName,
                paid: false,
                pending: true
                
            }
  
            fetch('http://localhost:5000/products', {
                method: "PUT",
                headers: {
                    'content-type': 'application/json'
                },
                body: JSON.stringify(bookedProduct)
            })
                .then(res => res.json())
                .then(data => {
                    toast.success('Booking successful')
                })
        } else {

            const url = `http://localhost:5000/products`;

            fetch(url, {
                method: "PUT",
                headers: {
                    'content-type': 'application/json'
                },
                body: JSON.stringify(bookingInfo)
            })
                .then(res => res.json())
                .then(data => {
                    toast.success('Booking successful')
                })
        }
    }


    return (
        <div>
            <div className="card w-[80%] mx-auto bg-base-100 shadow-xl">
                <div className="card-body items-center text-center">
                    <img src={product?.img} alt="" />
                    <h2 className="card-title">{product?.name}</h2>
                    <p>{product?.description}</p>
                    <p>Price: {parseInt(product?.price)}</p>
                    <p>In Stock: {product?.quantity}</p>
                    <p>Minimum Order: {orderQuantity}</p>
                    <div className='flex justify-center items-center'>
                        <input type="number" readOnly value={orderQuantity} className='input input-bordered' />
                        <PlusIcon
                            onClick={handleIncreaseQuantity}
                            className='w-9 h-9 cursor-pointer ml-3'></PlusIcon>
                        <MinusIcon
                            onClick={handleDecreaseQuantity}
                            className='w-9 h-9 cursor-pointer ml-3'></MinusIcon>
                    </div>

                    <div onClick={handleBookingInfo} className="card-actions">
                        <label htmlFor="my-modal-6" className="btn modal-button">Purchase</label>
                    </div>
                </div>
            </div>
            {product && <PurchaseModal product={product}></PurchaseModal>}
        </div>
    );
};

export default Purchase;